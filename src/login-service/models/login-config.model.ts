import { UserManagerSettings } from "oidc-client";
import { ModeService } from "../services/mode.service";

export class LoginConfig implements UserManagerSettings {
    private _className: string = "LoginConfig"; public get className(): string { return this._className; }
    private _depth: number = ModeService.depth; private get depth(): number { return this._depth; }

    private _auth_server_uri: string; // The URI of the authentication server
    private _auth_client_id: string; // The client ID for your app which has been registered in or generated by the authentication server
    private _post_login_redirect: string; // The URI of the webpage that the auth server should redirect to after a normal login (must also be set in auth server settings for this client)
    private _post_login_silent: string; // The URI of the webpage that the auth server should redirect to after a silent login (must also be set in auth server settings for this client)
    private _post_login_popup: string; // The URI of the webpage that the auth server should redirect to after a popup login (must also be set in auth server settings for this client)
    private _post_logout_redirect: string; // The URI of the webpage that the auth server should redirect to after a logout (must also be set in auth server settings for this client)
    private _oidc_scope: string = "openid profile gsupersonpantherid pantherCash"; // The userinfo scope(s) to request from the auth server (must also be set in auth server settings for this client)
    private _oidc_response_type: string = "id_token token"; // The response type(s) to request from the auth server
    private _oidc_keepalive: boolean = true;  // Boolean option to proactively update the user access token whenever it's about to expire (default true)
    private _oidc_poll_status: boolean = true;  // background polling, will trigger userSignedOut event when applicable
    private _oidc_ignore_claims: boolean = false;
    private _oidc_load_info: boolean = true;
    private _oidc_revoke_on_logout: boolean = true;
    private _oidc_userinfo_query: boolean = false; // Send OIDC userinfo parameters in the HTTP query string rather than in HTTP headers (workaround for bug in older GLUU auth servers; default false)
    private _timeout_login_silent: number = 11000; // The timeout in ms to wait for a silent login response
    private _pageOrigin: string | undefined = undefined; // Origin from which page DOM is loaded (if multiple origins are used)
    private _scriptOrigin: string | undefined = undefined; // Origin from which oidc-client scripts are loaded (if multiple origins are used)
    private _dataServiceURL: string; // The URI of the dataservice used to check user authorizations for advanced functions (e.g. the Advisor function)

    constructor(obj: any) {
        let fn: string = this.depth + ">" + this.className + "#fromRaw"; // tslint:disable-line:no-unused-variable

        for (let key in obj) {
            let value: any = obj[key];
            switch (key) {
                case "auth_server_uri": case "authority": case "GLUU_URL": this._auth_server_uri = value; break;
                case "auth_client_id": case "client_id": case "GLUU_CLIENT": this._auth_client_id = value; break;
                case "post_login_redirect": case "redirect_uri": case "GLUU_LOGIN_REDIRECT": this._post_login_redirect = value; break;
                case "post_login_silent": case "silent_redirect_uri": case "GLUU_LOGIN_SILENT": this._post_login_silent = value; break;
                case "post_login_popup": case "popup_redirect_uri": case "GLUU_LOGIN_POPUP": this._post_login_popup = value; break;
                case "post_logout_redirect": case "post_logout_redirect_uri": case "GLUU_REDIRECT_LOGOUT": this._post_logout_redirect = value; break;
                case "oidc_scope": case "scope": case "SCOPE": this._oidc_scope = value; break;
                case "oidc_response_type": case "response_type": this._oidc_response_type = value; break;
                case "oidc_keepalive": case "automaticSilentRenew": this._oidc_keepalive = value; break;
                case "oidc_poll_status": case "monitorSession": this._oidc_poll_status = value; break;
                case "oidc_ignore_claims": case "filterProtocolClaims": this._oidc_ignore_claims = value; break;
                case "oidc_load_info": case "loadUserInfo": this._oidc_load_info = value; break;
                case "oidc_revoke_on_logout": case "revokeAccessTokenOnSignout": this._oidc_revoke_on_logout = value; break;
                case "oidc_userinfo_query": case "userinfoHeaderBug": this._oidc_userinfo_query = value; break;
                case "timeout_login_silent": case "silentRequestTimeout": this._timeout_login_silent = value; break;
                case "pageOrigin": this._pageOrigin = value; break;
                case "scriptOrigin": this._scriptOrigin = value; break;
                case "dataServiceURL": case "BANNER_URL": this._dataServiceURL = value; break;
                default: console.warn(fn + ": unknown key in raw data - key = ", key, ", value = ", value); break;
            }
        }

        let missing: boolean = false;
        ["auth_server_uri", "auth_client_id"].forEach((key: string) => { if (!(key in this)) { missing = true; console.warn(fn + ": missing value for required property = ", key); } });
        if (missing) { console.log(fn + ": raw = ", obj); }

    }
    get auth_server_uri() { return this._auth_server_uri; } get authority() { return this.auth_server_uri; } get GLUU_URL() { return this.auth_server_uri; }
    get auth_client_id() { return this._auth_client_id; } get client_id() { return this.auth_client_id; } get GLUU_CLIENT() { return this.auth_client_id; }
    get post_login_redirect() { return this._post_login_redirect; } get redirect_uri() { return this.post_login_redirect; } get GLUU_LOGIN_REDIRECT() { return this.post_login_redirect; }
    get post_login_silent() { return this._post_login_silent; } get silent_redirect_uri() { return this.post_login_silent; } get GLUU_LOGIN_SILENT() { return this.post_login_silent; }
    get post_login_popup() { return this._post_login_popup; } get popup_redirect_uri() { return this.post_login_popup; } get GLUU_LOGIN_POPUP() { return this.post_login_popup; }
    get post_logout_redirect() { return this._post_logout_redirect; } get post_logout_redirect_uri() { return this.post_logout_redirect; } get GLUU_REDIRECT_LOGOUT() { return this.post_logout_redirect; }
    get oidc_scope() { return this._oidc_scope; } get scope() { return this.oidc_scope; } get SCOPE() { return this._oidc_scope; }
    get oidc_response_type() { return this._oidc_response_type; } get response_type() { return this.oidc_response_type; }
    get oidc_keepalive() { return this._oidc_keepalive; } get automaticSilentRenew() { return this.oidc_keepalive; }
    get oidc_poll_status() { return this._oidc_poll_status; } get monitorSession() { return this.oidc_poll_status; }
    get oidc_ignore_claims() { return this._oidc_ignore_claims; } get filterProtocolClaims() { return this.oidc_ignore_claims; }
    get oidc_load_info() { return this._oidc_load_info; } get loadUserInfo() { return this.oidc_load_info; }
    get oidc_revoke_on_logout() { return this._oidc_revoke_on_logout; } get revokeAccessTokenOnSignout() { return this.oidc_revoke_on_logout; }
    get oidc_userinfo_query() { return this._oidc_userinfo_query; } get userinfoHeaderBug() { return this._oidc_userinfo_query; }
    get timeout_login_silent() { return this._timeout_login_silent; } get silentRequestTimeout() { return this.timeout_login_silent; }
    get pageOrigin() { return this._pageOrigin; }
    get scriptOrigin() { return this._scriptOrigin; }
    get dataServiceURL() { return this._dataServiceURL; } get BANNER_URL() { return this.dataServiceURL; }
}
